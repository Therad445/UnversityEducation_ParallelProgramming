// Lab3.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
// 
// Задание 1. В соответствии с вариантом задания, написать на C++ программу программу, реализующую многопоточность на основе технологии OpenMP: она должна вычислять значение функции с помощью редукции. Измерять время работы программ для различных значений параметра N. Результаты занести в отчёт.
// На основе двух равно размерных массивов A и B(длины N) функция возвращает сумму значений, больших 1.
// Задание 2. Модифицировать программу, составленную по Заданию 1, убрав возможность параллельного использования вычислительных ресурсов. Измерять время работы программы для тех же значений параметров, что были использованы при выполнении Задания 1. Результаты сравнить и занести в отчёт.




#include <iostream>
#include <omp.h>

double function(double x, double y) {
    return x + y;
}

int main() {
    int N = 1000000; // значение параметра N
    double* A = new double[N];
    double* B = new double[N];

    // Заполнение массивов A и B данными
    // ...

    double sum = 0.0;
    double start_time, end_time;

    // Измерение времени работы программы
    start_time = omp_get_wtime();

    // Вычисление значения функции с помощью редукции
#pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < N; i++) {
        double result = function(A[i], B[i]);
        if (result > 1) {
            sum += result;
        }
    }

    // Вывод результата
    std::cout << "Sum: " << sum << std::endl;

    end_time = omp_get_wtime();
    std::cout << "Execution time: " << end_time - start_time << " seconds" << std::endl;

    delete[] A;
    delete[] B;

    return 0;
}

