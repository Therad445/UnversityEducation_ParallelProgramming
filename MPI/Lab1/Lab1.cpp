//
// Задание. В соответствии с вариантом задания, написать на C++ программу, реализующую многопроцессность на основе технологии MPI, работающую на основе программа должна работать на основе простой передачи сообщений.
// 
// 1	Реализуйте процесс-«счётчик», (который запускается со значением 0 и
//  1) если получена - 1, то он выводит в текущее значение и заканчивает работу;
//  2) если получено любое другое сообщение, то значение увеличивается на 1 и выводится сообщение об этом.
// 

#include <iostream>
#include "mpi.h"


int main(int argc, char** argv) {
    setlocale(LC_ALL, "Russian");
    int rank, size, value = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        // Процесс-счётчик
        while (true) {
            MPI_Recv(&value, 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            if (value == -1) {
                std::cout << "Текущее значение: " << value << std::endl;
                break;
            }
            else {
                value++;
                std::cout << "Значение увеличено на 1. Новое значение: " << value << std::endl;
            }
        }
    }
    else {
        // Остальные процессы
        // Отправка сообщения процессу-счётчику
        MPI_Send(&value, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}


//int main()
//{
//    // Инициализация среды параллельных вычислений MPI.
//    MPI_Init(NULL, NULL);
//
//    // Получение ранга текущего процесса в группе запущенных приложений.
//    // MPI_COMM_WORLD - коммуникатор, объединяющий все процессы параллельной программы.
//    int rank = -1;
//    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
//
//    // Получение количества процессов в группе.
//    int count_processes = -1;
//    MPI_Comm_size(MPI_COMM_WORLD, &count_processes);
//
//    // Вывод ранга (идентификатора) текущего процесса.
//    // Экземпляр ранга 0 дополнительно выводит 
//    // количество процессов в группе.
//    if (rank == 0)
//    {
//        std::cout
//            << "This is - " << rank
//            << " proccess \n"
//            << "Number of processors - " << count_processes << "\n"
//            << "-------------------------------\n";
//    }
//    else
//    {
//        std::cout
//            << "This is - " << rank
//            << " proccess \n"
//            << "-------------------------------\n";
//    }
//
//    // Завершение работы среды параллельных вычислений MPI
//    MPI_Finalize();
//
//    // Приостановка консольного окна перед закрытием для 
//    // тестирования программного кода в студии.
//    //std::cin.get();
//}

//int main()
//{
//    // Инициализация среды параллельных вычислений MPI.
//    MPI_Init(NULL, NULL);
//
//    // -----
//    // Размещение программного кода параллельной программы.
//    // -----
//
//    // Завершение работы среды параллельных вычислений MPI
//    MPI_Finalize();
//
//    // Приостановка консольного окна перед закрытием для 
//    // тестирования программного кода в студии.
//    std::cin.get();
//}

//int main()
//{
//    setlocale(LC_ALL, "Russian");
//    int i;
//    while (true)
//    {
//        int x;
//        printf("Введите число: \n");
//        std::cin >> x;
//        if (x == -1)
//        {
//            printf("Значение %d\n", i);
//            break;
//        }
//        else
//        {
//            i = +1;
//            printf("Значение увеличино на 1\n");
//        }
//    }
//    return 0;
//}
